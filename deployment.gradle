/**
 * Artifact
 */
group = project.groupId
description = project.artifactDescription
version = project.artifactVersion

/**
 * Testing
 */
test {
	useJUnitPlatform {
		includeTags 'unittest'
		excludeTags 'integration'
	}
}

/**
 * Javadoc
 */
javadoc {
	options {
		title = "${project.artifactName} (v${project.version})"
		windowTitle = "${project.artifactName} (v${project.version})"
		encoding = "UTF-8"
	}
}

/**
 * Sources - build a jar with source files
 */
task sourcesJar(type: Jar, dependsOn: classes, description: 'Builds the sourcesJar.', group: 'build') {
	from sourceSets.main.allSource
	baseName = baseName.toLowerCase()
	classifier = 'sources'
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc, description: 'Builds the javadocJar.', group: 'build') {
	classifier = 'javadoc'
	baseName = baseName.toLowerCase()
	from javadoc.destinationDir
}

/**
 * Artifacts
 */
artifacts {
	archives sourcesJar
	archives javadocJar
}

/**
 * Deployment
 */
def pomConfig = {
	licenses {
		license {
			name "MIT License"
			url "https://opensource.org/licenses/MIT"
			distribution "repo"
		}
	}
	developers {
		developer {
			id "PhilippHeuer"
			name "Philipp Heuer"
			email "git@philippheuer.me"
		}
	}

	scm {
		url project.vcsUrl
	}
}
publishing {
	publications {
		mainProject(MavenPublication) {
			from project.components.java
			artifact sourcesJar
			artifact javadocJar
			groupId project.group
			artifactId String.valueOf(project.artifactName).toLowerCase()
			version project.version
			pom.withXml {
				def root = asNode()
				root.appendNode('description', project.artifactDescription)
				root.appendNode('name', String.valueOf(project.artifactName))
				root.appendNode('url', String.valueOf(project.websiteUrl))
				root.children().last() + pomConfig
			}
		}
	}
}

/**
 * Artifactory Upload
 */
artifactory {
	contextUrl = 'https://oss.jfrog.org'
	publish {
		repository {
			repoKey = 'oss-snapshot-local'
			username = System.getenv("ARTIFACTORY_USER")
			password = System.getenv("ARTIFACTORY_API_KEY")
		}
		defaults {
			publications('mainProject')
			publishArtifacts = true
			publishPom = true
			properties = [
					'build.number': String.valueOf(System.getenv("CI_PIPELINE_IID")),
					'build.name'  : String.valueOf(project.artifactName).toLowerCase()
			]
		}
	}
	resolve {
		repoKey = 'jcenter'
	}
	clientConfig.info.setBuildName(String.valueOf(project.name).toLowerCase())
	clientConfig.info.setBuildNumber(String.valueOf(System.getenv("CI_PIPELINE_IID")))
}

/**
 * Bintray Upload
 */
bintray {
	user = System.getenv("BINTRAY_USER")
	key = System.getenv("BINTRAY_API_KEY")
	publications = ['mainProject']
	dryRun = false
	pkg {
		// jcenter repository namespace and name
		userOrg = String.valueOf(project.artifactNamespace).toLowerCase()
		repo = 'maven'
		name = String.valueOf(project.artifactName).toLowerCase()
		desc = project.description
		licenses = ['MIT']
		websiteUrl = project.websiteUrl
		issueTrackerUrl = project.issueTrackerUrl
		vcsUrl = project.vcsUrl
		labels = []
		publicDownloadNumbers = true
		version {
			name = project.version
			vcsTag = project.version
			released = new Date()
		}
	}
}
